"""
Django settings for judge project.

Generated by 'django-admin startproject' using Django 1.10.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from django.core.exceptions import ImproperlyConfigured

from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load sensitive information from a json-file named secrets.json
# located at the root of the project with the following format:
#
# {
#     "[config_name]": {
#         "SECRET_KEY": "[secret_key]",
#         "DATABASE_HOST": "[database_host]",
#         "DATABASE_NAME": "[database_name]",
#         "DATABASE_USER": "[database_user]",
#         "DATABASE_PASS": "[database_pass]",
#         "DATABASE_PORT": "[database_port]",
#         "EMAIL_USER": "[email_user]",
#         "EMAIL_PASS": "[email_pass]",
#     },
#     "[config_name]": {
#         ...
#     }
# }
#
# In the simplest form, [config_name] should be development for a single developer.
# secrets.json cannot be committed to source control and only the admins should
# handle production settings in servers.
#
SECRET_FILE_CONTENT = None


def get_secret_value(config_name, key):
    global SECRET_FILE_CONTENT
    if not SECRET_FILE_CONTENT:
        import json
        try:
            with open(os.path.join(BASE_DIR, '..', 'secrets.json'), 'r') as f:
                SECRET_FILE_CONTENT = json.load(f)
        except:
            raise ImproperlyConfigured("Error loading secret file content")
    config = SECRET_FILE_CONTENT.get(config_name)
    if not config:
        raise ImproperlyConfigured('Configuration for config_name=%s not found' % config_name)
    return config.get(key)


ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'api.apps.ApiConfig',
    'mog.apps.MogConfig',
    'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'judge.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mog.context_processor.common',
                'mog.context_processor.special_days',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'judge.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'mog/static')

MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'media')
MEDIA_URL = '/media/'

LOGIN_URL = '/mog/login/'

# Internationalization
LOCALE_PATHS = [
    os.path.join(BASE_DIR, '..', 'locale')
]

LANGUAGES = [
    ('es', _('Spanish')),
    ('en', _('English')),
]

# Used by django_registration
LOGIN_REDIRECT_URL = '/'
ACCOUNT_ACTIVATION_DAYS = 7

SITE_ID = 1

# Value used to assign initial rating when user has not previous
# rated contest. This value can be changed depending of division
# thresholds.
BASE_RATING = 1300

# Rating changes are not allowed beyond MAX_RATING_DELTA. If this
# happens, then the increase/decrease rating is truncated.
MAX_RATING_DELTA = 150
