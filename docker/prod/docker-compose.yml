version: "3.8"

services:
  database:
    image: postgres:11.5
    environment:
      - POSTGRES_DB=judge
      - POSTGRES_USER=judge
      - POSTGRES_PASSWORD=uhdtas
    volumes:
      - pgdb:/var/lib/postgresql/data
  api:
    build:
      context: ../..
      dockerfile: docker/prod/dockerfile
    command: environ/bin/gunicorn --workers 4 --statsd-host=statsd_exporter:9125 --statsd-prefix=judge -b :8000 judge.wsgi:application
    volumes:
      - varwww:/var/www/judge
      - problems:/problems
    ports:
      - "8000:8000"
    depends_on:
      - database
  grader:
    build:
      context: ../..
      dockerfile: docker/prod/dockerfile.grader
    command: bash -c "bash grader-firewall.sh && /code/environ/bin/python3 manage.py grader"
    volumes:
      - problems:/problems
    cap_add:
      - NET_ADMIN
  ######################################################################
  # Monitoring
  ######################################################################
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./web-config.yml:/etc/prometheus/web-config.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.config.file=/etc/prometheus/web-config.yml"
      - "--web.external-url=/prometheus/"
      - "--web.route-prefix=/prometheus/"
    extra_hosts:
      # We needed to connect to a `node_exporter` running
      # in host mode, so we also had to scrape an endpoint
      # expose at the host level.
      #
      # We still need to allow connections from Docker. If
      # we're using something like UFW, we need to gather the
      # Docker subnet info and enable it:
      # $ docker network inspect prod_default | jq .[0].IPAM.Config.[0].Subnet
      # $ sudo ufw allow from 172.18.0.0/16 to any port 9100 proto tcp
      - "host.docker.internal:host-gateway"
    ports:
      - "9090:9090"
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    env_file:
      # docker/prod/grafana.env
      # -----------------------
      # GF_SECURITY_ADMIN_USER=XXX
      # GF_SECURITY_ADMIN_PASSWORD=XXX
      - ./grafana.env
    environment:
      - GF_SERVER_ROOT_URL=/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://judge:uhdtas@database:5432/judge?sslmode=disable
    depends_on:
      - database
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
  statsd_exporter:
    image: prom/statsd-exporter


volumes:
  grafana:
  pgdb:
  problems:
  varwww:
